# Golang プロジェクトルール

あなたは、Golangプロジェクトの開発をサポートするAIアシスタントです。以下のルールに従って、コードの分析、生成、修正を行ってください。

## コーディング規約とフォーマット

- 常に最新の安定版Goを使用する（現在はGo 1.22.x）
- すべてのコードは`gofmt`でフォーマットされているものとする
- 命名規則：
  - パッケージ名: 小文字、単語区切りなし（例：`httputil`）
  - 変数/関数: キャメルケース（例：`userID`, `GetUser`）
  - インターフェース: 名詞または形容詞+er（例：`Reader`, `Formatter`）
  - 定数: キャメルケースまたは全て大文字（例：`MaxLength`, `HTTP_PORT`）
- メソッドレシーバーには一貫した命名規則を使用する（1-2文字の略語）
- 不要なエイリアスを避ける（例：`import f "fmt"`）
- 80-100文字の行長を維持する
- 明確で説明的な変数名を使用する

## エラー処理

- エラーは常に明示的に処理し、nilチェックを行う
- エラーは最後のリターン値として返す
- エラー発生時にリソースが確実に解放されるよう`defer`を使用する
- panicよりもエラーリターンを優先する（パッケージ初期化など特殊な場合を除く）
- エラーラッピングには`fmt.Errorf`と`%w`を使用する：
  ```go
  if err != nil {
      return fmt.Errorf("failed to process file %s: %w", filename, err)
  }
  ```
- 意味のあるカスタムエラーを定義して使用する：
  ```go
  type NotFoundError struct {
      ID string
  }

  func (e NotFoundError) Error() string {
      return fmt.Sprintf("entity with ID %s not found", e.ID)
  }
  ```
- エラーにはコンテキスト情報を含め、具体的なメッセージを返す

## パッケージとプロジェクト構造

- [標準Go Project Layout](https://github.com/golang-standards/project-layout)に従う：
  ```
  ├── cmd/                  # アプリケーションのメインエントリポイント
  ├── internal/             # 非公開のアプリケーションコード
  ├── pkg/                  # 公開APIとして使用可能なコード
  ├── api/                  # APIプロトコル定義
  ├── configs/              # 設定ファイル
  ├── test/                 # 追加のテストとテストデータ
  └── docs/                 # ドキュメント
  ```
- パッケージは単一の責任を持つようにする
- 循環依存を避ける
- テストファイルは実装と同じディレクトリに配置する（`*_test.go`）
- モックとテストヘルパーは`testutil`パッケージに分離する
- コマンドライン引数の解析には`flag`パッケージまたは`cobra`を使用する
- 設定管理には`viper`などのライブラリを検討する

## インターフェースと抽象化

- 継承よりコンポジションを優先する
- インターフェースは使用する側で定義する（インターフェースを実装する側ではなく）
- 小さく、フォーカスしたインターフェースを作成する：
  ```go
  // 良い例
  type Reader interface {
      Read(p []byte) (n int, err error)
  }

  type Writer interface {
      Write(p []byte) (n int, err error)
  }

  // 必要に応じて組み合わせる
  type ReadWriter interface {
      Reader
      Writer
  }
  ```
- インターフェースの実装は明示的に宣言しなくても良い
- モックテストを容易にするためにインターフェースを使用する

## 並行処理

- ゴルーチンの責任を明確に定義し、過剰に使用しない
- チャネルを適切に管理し、リークを防ぐ：
  ```go
  // ゴルーチンの完了を待つ
  done := make(chan struct{})
  go func() {
      // 処理
      close(done)
  }()
  <-done

  // コンテキストによるキャンセル
  ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
  defer cancel()
  select {
  case result := <-resultChan:
      return result, nil
  case <-ctx.Done():
      return nil, ctx.Err()
  }
  ```
- `sync.WaitGroup`を使用して複数のゴルーチンの完了を待つ
- ミューテックスは最小限の範囲で使用する
- 共有メモリよりもチャネルを優先する
- コンテキストを使ってゴルーチンをキャンセルまたはタイムアウトさせる

## テストと文書化

- テーブル駆動テストを使用して複数のケースを効率的にテストする：
  ```go
  func TestAdd(t *testing.T) {
      tests := []struct {
          name     string
          a, b     int
          expected int
      }{
          {"positive numbers", 2, 3, 5},
          {"negative numbers", -2, -3, -5},
          {"mixed signs", 2, -3, -1},
      }
      
      for _, tc := range tests {
          t.Run(tc.name, func(t *testing.T) {
              got := Add(tc.a, tc.b)
              if got != tc.expected {
                  t.Errorf("Add(%d, %d) = %d; want %d", tc.a, tc.b, got, tc.expected)
              }
          })
      }
  }
  ```
- ヘルパー関数には`t.Helper()`を使用する
- すべてのエクスポートされた関数、型、定数にはGoDocコメントを付ける
- テストに`testify`などのライブラリの使用を検討する
- ベンチマークテストを書いてパフォーマンスを測定する
- レースコンディションを検出するために`-race`フラグでテストを実行する

## データベースとORM

- データベース操作には`database/sql`パッケージを直接使用するか、`sqlx`などの薄いラッパーを使用する
- 完全なORMはパフォーマンスと型安全性のために慎重に選択する
- SQLインジェクションを防ぐためにパラメータ化クエリを使用する
- トランザクションを適切に管理し、常にコミットまたはロールバックすることを確認する
- マイグレーションには`golang-migrate`などのツールを使用する
- データベースの接続プールを適切に設定し、監視する

## API設計とWebサービス

- RESTful APIには標準的なHTTPメソッドとステータスコードを使用する
- 一貫したエンドポイント命名規則を使用する（例：`/api/v1/resources/{id}`）
- API応答には一貫した構造を使用する
- リクエスト処理とビジネスロジックを分離する
- HTTPハンドラには依存性注入を使用する
- APIドキュメントには`swag`または`go-swagger`を使用する
- ミドルウェアを使用して認証、ロギング、パニックリカバリなどの横断的関心事を処理する

## パフォーマンス最適化

- 大量のデータではスライスの初期容量を指定する
- 小さな構造体のコピーが大きな構造体へのポインタよりも効率的な場合がある
- 文字列の連結には`strings.Builder`または`bytes.Buffer`を使用する
- プロファイリングツールを使用してボトルネックを特定する
- キャッシュを賢く使用し、無効化戦略を検討する
- リソース効率のために適切なアルゴリズムとデータ構造を選択する

## セキュリティのベストプラクティス

- 機密情報はハードコードせず、環境変数または安全な構成管理を使用する
- すべてのユーザー入力を検証し、サニタイズする
- 認証にはJWTまたはセッショントークンを使用し、適切な期限設定を行う
- クロスサイトスクリプティング（XSS）とクロスサイトリクエストフォージェリ（CSRF）を防止する
- 適切なTLSセキュリティ設定でHTTPSを使用する
- GOSECなどのツールを使用してセキュリティの脆弱性をスキャンする

## 依存関係管理

- Go Modulesを使用して依存関係を管理する
- バージョンのピン留めには明示的なタグまたはコミットハッシュを使用する
- 巨大な依存関係や活発に保守されていない依存関係は避ける
- vendor/ディレクトリを使用するかどうかをプロジェクトポリシーで定義する
- 依存関係のセキュリティ脆弱性を定期的にスキャンする

## デプロイメントとDevOps

- 複数のステージ（開発、テスト、本番）に対応する設定を提供する
- 12-Factorアプリケーション原則に従う
- コンテナ化にはDockerfileを使用し、マルチステージビルドを検討する
- CIパイプラインでは少なくとも：テスト、lint、セキュリティスキャン、ビルドを実行する
- プロメテウスなどのモニタリングとログ記録の統合
- 障害に対する耐性と優雅なシャットダウンメカニズムを実装する

## プロジェクト固有の規約

- グローバル変数とシングルトンパターンは最小限に抑え、依存性注入を優先する
- リファクタリングのためのテストカバレッジ目標を設定する（例：80%以上）
- 大規模なプロジェクトではマイクロサービスとモジュラーモノリスの中間のアプローチを検討する
- 開発チームの合意に基づいて、これらのルールの例外を定義する
- プロジェクトの進化に合わせて定期的にこれらのルールを見直し更新する
